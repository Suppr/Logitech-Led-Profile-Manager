/* automatically generated by rust-bindgen */

pub const IPC_GETVERSION: LPARAM = 0;
pub const IPC_GETVERSIONSTRING: LPARAM = 1;
pub const IPC_GETREGISTEREDVERSION: LPARAM = 770;
pub const IPC_IS_SAFEMODE: LPARAM = 999;
pub const IPC_PLAYFILE: LPARAM = 100;
pub const IPC_ENQUEUEFILE: LPARAM = 100;
pub const IPC_PLAYFILEW: LPARAM = 1100;
pub const IPC_ENQUEUEFILEW: LPARAM = 1100;
pub const IPC_DELETE: LPARAM = 101;
pub const IPC_DELETE_INT: LPARAM = 1101;
pub const IPC_STARTPLAY: LPARAM = 102;
pub const IPC_STARTPLAY_INT: LPARAM = 1102;
pub const IPC_CHDIR: LPARAM = 103;
pub const IPC_ISPLAYING: LPARAM = 104;
pub const IPC_GETOUTPUTTIME: LPARAM = 105;
pub const IPC_JUMPTOTIME: LPARAM = 106;
pub const IPC_GETMODULENAME: LPARAM = 109;
pub const IPC_EX_ISRIGHTEXE: LPARAM = 666;
pub const IPC_WRITEPLAYLIST: LPARAM = 120;
pub const IPC_SETPLAYLISTPOS: LPARAM = 121;
pub const IPC_SETVOLUME: LPARAM = 122;
pub const IPC_SETPANNING: LPARAM = 123;
pub const IPC_SETBALANCE: LPARAM = 123;
pub const IPC_GETLISTLENGTH: LPARAM = 124;
pub const IPC_GETLISTPOS: LPARAM = 125;
pub const IPC_GETNEXTLISTPOS: LPARAM = 136;
pub const IPC_GETINFO: LPARAM = 126;
pub const IPC_GETEQDATA: LPARAM = 127;
pub const IPC_SETEQDATA: LPARAM = 128;
pub const IPC_ADDBOOKMARK: LPARAM = 129;
pub const IPC_ADDBOOKMARKW: LPARAM = 131;
pub const IPC_INSTALLPLUGIN: LPARAM = 130;
pub const IPC_RESTARTWINAMP: LPARAM = 135;
pub const IPC_RESTARTSAFEWINAMP: LPARAM = 1135;
pub const IPC_ISFULLSTOP: LPARAM = 400;
pub const IPC_INETAVAILABLE: LPARAM = 242;
pub const IPC_UPDTITLE: LPARAM = 243;
pub const IPC_REFRESHPLCACHE: LPARAM = 247;
pub const IPC_GET_SHUFFLE: LPARAM = 250;
pub const IPC_GET_REPEAT: LPARAM = 251;
pub const IPC_SET_SHUFFLE: LPARAM = 252;
pub const IPC_SET_REPEAT: LPARAM = 253;
pub const IPC_ENABLEDISABLE_ALL_WINDOWS: LPARAM = 259;
pub const IPC_GETWND: LPARAM = 260;
pub const IPC_GETWND_EQ: LPARAM = 0;
pub const IPC_GETWND_PE: LPARAM = 1;
pub const IPC_GETWND_MB: LPARAM = 2;
pub const IPC_GETWND_VIDEO: LPARAM = 3;
pub const IPC_ISWNDVISIBLE: LPARAM = 261;
pub const IPC_SETSKINW: LPARAM = 199;
pub const IPC_SETSKIN: LPARAM = 200;
pub const IPC_GETSKIN: LPARAM = 201;
pub const IPC_GETSKINW: LPARAM = 1201;
pub const IPC_EXECPLUG: LPARAM = 202;
pub const IPC_GETPLAYLISTFILE: LPARAM = 211;
pub const IPC_GETPLAYLISTFILEW: LPARAM = 214;
pub const IPC_GETPLAYLISTTITLE: LPARAM = 212;
pub const IPC_GETPLAYLISTTITLEW: LPARAM = 213;
pub const IPC_GETHTTPGETTER: LPARAM = 240;
pub const IPC_GETHTTPGETTERW: LPARAM = 1240;
pub const IPC_MBOPEN: LPARAM = 241;
pub const IPC_CHANGECURRENTFILE: LPARAM = 245;
pub const IPC_CHANGECURRENTFILEW: LPARAM = 1245;
pub const IPC_GETMBURL: LPARAM = 246;
pub const IPC_MBBLOCK: LPARAM = 248;
pub const IPC_MBOPENREAL: LPARAM = 249;
pub const IPC_ADJUST_OPTIONSMENUPOS: LPARAM = 280;
pub const IPC_GET_HMENU: LPARAM = 281;
pub const IPC_GET_EXTENDED_FILE_INFO: LPARAM = 290;
pub const IPC_GET_EXTENDED_FILE_INFO_HOOKABLE: LPARAM = 296;
pub const IPC_GET_BASIC_FILE_INFO: LPARAM = 291;
pub const IPC_GET_BASIC_FILE_INFOW: LPARAM = 1291;
pub const IPC_GET_EXTLIST: LPARAM = 292;
pub const IPC_GET_EXTLISTW: LPARAM = 1292;
pub const IPC_GET_PLAYLIST_EXTLISTW: LPARAM = 282;
pub const IPC_INFOBOX: LPARAM = 293;
pub const IPC_INFOBOXW: LPARAM = 1293;
pub const IPC_SET_EXTENDED_FILE_INFO: LPARAM = 294;
pub const IPC_WRITE_EXTENDED_FILE_INFO: LPARAM = 295;
pub const IPC_FORMAT_TITLE: LPARAM = 297;
pub const IPC_FORMAT_TITLE_EXTENDED: LPARAM = 298;
pub const IPC_COPY_EXTENDED_FILE_INFO: LPARAM = 299;
pub const IPC_COPY_EXTENDED_FILE_INFOW: LPARAM = 1299;
pub const IPC_GETUNCOMPRESSINTERFACE: LPARAM = 331;
pub const IPC_ADD_PREFS_DLG: LPARAM = 332;
pub const IPC_ADD_PREFS_DLGW: LPARAM = 1332;
pub const IPC_REMOVE_PREFS_DLG: LPARAM = 333;
pub const IPC_UPDATE_PREFS_DLG: LPARAM = 342;
pub const IPC_UPDATE_PREFS_DLGW: LPARAM = 1342;
pub const IPC_OPENPREFSTOPAGE: LPARAM = 380;
pub const IPC_GETINIFILE: LPARAM = 334;
pub const IPC_GETINIFILEW: LPARAM = 1334;
pub const IPC_GETINIDIRECTORY: LPARAM = 335;
pub const IPC_GETINIDIRECTORYW: LPARAM = 1335;
pub const IPC_GETPLUGINDIRECTORY: LPARAM = 336;
pub const IPC_GETPLUGINDIRECTORYW: LPARAM = 1336;
pub const IPC_GETM3UDIRECTORY: LPARAM = 337;
pub const IPC_GETM3UDIRECTORYW: LPARAM = 338;
pub const IPC_GETVISDIRECTORYW: LPARAM = 339;
pub const IPC_GETSKINDIRECTORYW: LPARAM = 340;
pub const IPC_GETDSPDIRECTORYW: LPARAM = 341;
pub const IPC_GETMLINIFILE: LPARAM = 343;
pub const IPC_GETMLINIFILEW: LPARAM = 1343;
pub const IPC_SPAWNBUTTONPOPUP: LPARAM = 361;
pub const IPC_OPENURLBOX: LPARAM = 360;
pub const IPC_OPENFILEBOX: LPARAM = 362;
pub const IPC_OPENDIRBOX: LPARAM = 363;
pub const IPC_SETDIALOGBOXPARENT: LPARAM = 364;
pub const IPC_GETDIALOGBOXPARENT: LPARAM = 365;
pub const IPC_UPDATEDIALOGBOXPARENT: LPARAM = 366;
pub const IPC_DRO_MIN: LPARAM = 401;
pub const IPC_SET_JTF_COMPARATOR: LPARAM = 409;
pub const IPC_SET_JTF_COMPARATOR_W: LPARAM = 410;
pub const IPC_SET_JTF_DRAWTEXT: LPARAM = 416;
pub const IPC_SET_JTF_LOAD_MODE: LPARAM = 426;
pub const IPC_DRO_MAX: LPARAM = 499;
pub const IPC_GET_GENSKINBITMAP: LPARAM = 503;
pub const EMBED_FLAGS_NORESIZE: LPARAM = 1;
pub const EMBED_FLAGS_NOTRANSPARENCY: LPARAM = 2;
pub const EMBED_FLAGS_NOWINDOWMENU: LPARAM = 4;
pub const EMBED_FLAGS_GUID: LPARAM = 8;
pub const EMBED_FLAGS_FFCALLBACK: LPARAM = 16;
pub const EMBED_FLAGS_LEGACY_WND: LPARAM = 32;
pub const IPC_GET_EMBEDIF: LPARAM = 505;
pub const EWN_FIRST: LPARAM = 0;
pub const EWN_SHOWWINDOW: LPARAM = 0;
pub const IPC_SKINWINDOW: LPARAM = 534;
pub const SWF_NORESIZE: LPARAM = 1;
pub const SWF_NOTRANSPARENCY: LPARAM = 2;
pub const SWF_NOWINDOWMENU: LPARAM = 4;
pub const IPC_EMBED_ENUM: LPARAM = 532;
pub const IPC_EMBED_ISVALID: LPARAM = 533;
pub const IPC_EMBED_ADD_LEGACY: LPARAM = 535;
pub const IPC_EMBED_REMOVE_LEGACY: LPARAM = 536;
pub const IPC_EMBED_UPDATE_LEGACY_POS: LPARAM = 537;
pub const IPC_GET_EMBED_SNAPFUNC: LPARAM = 538;
pub const IPC_CONVERTFILE: LPARAM = 506;
pub const IPC_CONVERTFILEW: LPARAM = 515;
pub const IPC_CONVERTFILE_END: LPARAM = 507;
pub const IPC_CONVERTFILEW_END: LPARAM = 516;
pub const IPC_CONVERT_CONFIG: LPARAM = 508;
pub const IPC_CONVERT_CONFIG_END: LPARAM = 509;
pub const IPC_CONVERT_CONFIG_ENUMFMTS: LPARAM = 510;
pub const IPC_BURN_CD: LPARAM = 511;
pub const IPC_CONVERT_SET_PRIORITY: LPARAM = 512;
pub const IPC_CONVERT_SET_PRIORITYW: LPARAM = 517;
pub const IPC_CONVERT_TEST: LPARAM = 518;
pub const IPC_CONVERT_CONFIG_SET_ITEM: LPARAM = 513;
pub const IPC_CONVERT_CONFIG_GET_ITEM: LPARAM = 514;
pub const IPC_HOOK_TITLES: LPARAM = 850;
pub const IPC_HOOK_TITLESW: LPARAM = 851;
pub const IPC_GETSADATAFUNC: LPARAM = 800;
pub const IPC_GETVUDATAFUNC: LPARAM = 801;
pub const IPC_ISMAINWNDVISIBLE: LPARAM = 900;
pub const IPC_SETPLEDITCOLORS: LPARAM = 920;
pub const IPC_SPAWNEQPRESETMENU: LPARAM = 933;
pub const IPC_SPAWNFILEMENU: LPARAM = 934;
pub const IPC_SPAWNOPTIONSMENU: LPARAM = 935;
pub const IPC_SPAWNWINDOWSMENU: LPARAM = 936;
pub const IPC_SPAWNHELPMENU: LPARAM = 937;
pub const IPC_SPAWNPLAYMENU: LPARAM = 938;
pub const IPC_SPAWNPEFILEMENU: LPARAM = 939;
pub const IPC_SPAWNPEPLAYLISTMENU: LPARAM = 940;
pub const IPC_SPAWNPESORTMENU: LPARAM = 941;
pub const IPC_SPAWNPEHELPMENU: LPARAM = 942;
pub const IPC_SPAWNMLFILEMENU: LPARAM = 943;
pub const IPC_SPAWNMLVIEWMENU: LPARAM = 944;
pub const IPC_SPAWNMLHELPMENU: LPARAM = 945;
pub const IPC_SPAWNPELISTOFPLAYLISTS: LPARAM = 946;
pub const IPC_IS_PLAYING_VIDEO: LPARAM = 501;
pub const IPC_GET_IVIDEOOUTPUT: LPARAM = 500;
pub const VIDUSER_SET_INFOSTRING: LPARAM = 4096;
pub const VIDUSER_GET_VIDEOHWND: LPARAM = 4097;
pub const VIDUSER_SET_VFLIP: LPARAM = 4098;
pub const VIDUSER_SET_TRACKSELINTERFACE: LPARAM = 4099;
pub const VIDUSER_OPENVIDEORENDERER: LPARAM = 4100;
pub const VIDUSER_CLOSEVIDEORENDERER: LPARAM = 4101;
pub const VIDUSER_GETPOPUPMENU: LPARAM = 4102;
pub const VIDUSER_SET_INFOSTRINGW: LPARAM = 4103;
pub const VIDUSER_SET_THREAD_SAFE: LPARAM = 4104;
pub const VIDUSER_SET_PALETTE: LPARAM = 4112;
pub const IPC_HAS_VIDEO_SUPPORT: LPARAM = 502;
pub const IPC_CB_WND_EQ: LPARAM = 0;
pub const IPC_CB_WND_PE: LPARAM = 1;
pub const IPC_CB_WND_MB: LPARAM = 2;
pub const IPC_CB_WND_VIDEO: LPARAM = 3;
pub const IPC_CB_WND_MAIN: LPARAM = 4;
pub const IPC_CB_ONSHOWWND: LPARAM = 600;
pub const IPC_CB_ONHIDEWND: LPARAM = 601;
pub const IPC_CB_GETTOOLTIP: LPARAM = 602;
pub const IPC_CB_GETTOOLTIPW: LPARAM = 1602;
pub const IPC_CB_MISC: LPARAM = 603;
pub const IPC_CB_MISC_TITLE: LPARAM = 0;
pub const IPC_CB_MISC_VOLUME: LPARAM = 1;
pub const IPC_CB_MISC_STATUS: LPARAM = 2;
pub const IPC_CB_MISC_EQ: LPARAM = 3;
pub const IPC_CB_MISC_INFO: LPARAM = 4;
pub const IPC_CB_MISC_VIDEOINFO: LPARAM = 5;
pub const IPC_CB_MISC_TITLE_RATING: LPARAM = 6;
pub const IPC_CB_MISC_PAUSE: LPARAM = 7;
pub const IPC_CB_MISC_UNPAUSE: LPARAM = 8;
pub const IPC_CB_CONVERT_STATUS: LPARAM = 604;
pub const IPC_CB_CONVERT_DONE: LPARAM = 605;
pub const IPC_ADJUST_FFWINDOWSMENUPOS: LPARAM = 606;
pub const IPC_ISDOUBLESIZE: LPARAM = 608;
pub const IPC_ADJUST_FFOPTIONSMENUPOS: LPARAM = 609;
pub const IPC_GETTIMEDISPLAYMODE: LPARAM = 610;
pub const IPC_SETVISWND: LPARAM = 611;
pub const IPC_GETVISWND: LPARAM = 612;
pub const IPC_ISVISRUNNING: LPARAM = 613;
pub const IPC_CB_VISRANDOM: LPARAM = 628;
pub const IPC_SETIDEALVIDEOSIZE: LPARAM = 614;
pub const IPC_GETSTOPONVIDEOCLOSE: LPARAM = 615;
pub const IPC_SETSTOPONVIDEOCLOSE: LPARAM = 616;
pub const IPC_CB_ONTOGGLEAOT: LPARAM = 618;
pub const IPC_GETPREFSWND: LPARAM = 619;
pub const IPC_SET_PE_WIDTHHEIGHT: LPARAM = 620;
pub const IPC_GETLANGUAGEPACKINSTANCE: LPARAM = 621;
pub const IPC_CB_PEINFOTEXT: LPARAM = 622;
pub const IPC_CB_OUTPUTCHANGED: LPARAM = 623;
pub const IPC_GETOUTPUTPLUGIN: LPARAM = 625;
pub const IPC_SETDRAWBORDERS: LPARAM = 626;
pub const IPC_DISABLESKINCURSORS: LPARAM = 627;
pub const IPC_GETSKINCURSORS: LPARAM = 628;
pub const IPC_CB_RESETFONT: LPARAM = 629;
pub const IPC_IS_FULLSCREEN: LPARAM = 630;
pub const IPC_SET_VIS_FS_FLAG: LPARAM = 631;
pub const IPC_SHOW_NOTIFICATION: LPARAM = 632;
pub const IPC_GETSKININFO: LPARAM = 633;
pub const IPC_GETSKININFOW: LPARAM = 1633;
pub const IPC_GET_MANUALPLADVANCE: LPARAM = 634;
pub const IPC_SET_MANUALPLADVANCE: LPARAM = 635;
pub const IPC_GET_NEXT_PLITEM: LPARAM = 636;
pub const IPC_GET_PREVIOUS_PLITEM: LPARAM = 637;
pub const IPC_IS_WNDSHADE: LPARAM = 638;
pub const IPC_SETRATING: LPARAM = 639;
pub const IPC_GETRATING: LPARAM = 640;
pub const IPC_GETNUMAUDIOTRACKS: LPARAM = 641;
pub const IPC_GETNUMVIDEOTRACKS: LPARAM = 642;
pub const IPC_GETAUDIOTRACK: LPARAM = 643;
pub const IPC_GETVIDEOTRACK: LPARAM = 644;
pub const IPC_SETAUDIOTRACK: LPARAM = 645;
pub const IPC_SETVIDEOTRACK: LPARAM = 646;
pub const IPC_PUSH_DISABLE_EXIT: LPARAM = 647;
pub const IPC_POP_DISABLE_EXIT: LPARAM = 648;
pub const IPC_IS_EXIT_ENABLED: LPARAM = 649;
pub const IPC_IS_AOT: LPARAM = 650;
pub const IPC_USES_RECYCLEBIN: LPARAM = 651;
pub const IPC_FLUSHAUDITS: LPARAM = 652;
pub const IPC_GETPLAYITEM_START: LPARAM = 653;
pub const IPC_GETPLAYITEM_END: LPARAM = 654;
pub const IPC_GETVIDEORESIZE: LPARAM = 655;
pub const IPC_SETVIDEORESIZE: LPARAM = 656;
pub const IPC_INITIAL_SHOW_STATE: LPARAM = 657;
pub const IPC_GET_STOP_AFTER_CURRENT: LPARAM = 658;
pub const IPC_PLCMD: LPARAM = 1000;
pub const IPC_VIDCMD: LPARAM = 1002;
pub const IPC_STATS_LIBRARY_ITEMCNT: LPARAM = 1300;
pub const IPC_FF_FIRST: LPARAM = 2000;
pub const IPC_FF_ONCOLORTHEMECHANGED: LPARAM = 2003;
pub const IPC_FF_ISMAINWND: LPARAM = 2004;
pub const IPC_FF_GETCONTENTWND: LPARAM = 2005;
pub const IPC_FF_NOTIFYHOTKEY: LPARAM = 2006;
pub const IPC_FF_LAST: LPARAM = 3000;
pub const IPC_GETDROPTARGET: LPARAM = 3001;
pub const IPC_PLAYLIST_MODIFIED: LPARAM = 3002;
pub const IPC_PLAYING_FILE: LPARAM = 3003;
pub const IPC_PLAYING_FILEW: LPARAM = 13003;
pub const IPC_FILE_TAG_MAY_UPDATEW: LPARAM = 3046;
pub const IPC_FILE_TAG_MAY_HAVE_UPDATED: LPARAM = 3004;
pub const IPC_FILE_TAG_MAY_HAVE_UPDATEDW: LPARAM = 3005;
pub const IPC_ALLOW_PLAYTRACKING: LPARAM = 3007;
pub const IPC_HOOK_OKTOQUIT: LPARAM = 3010;
pub const IPC_WRITECONFIG: LPARAM = 3011;
pub const IPC_UPDATE_URL: LPARAM = 3012;
pub const IPC_GET_RANDFUNC: LPARAM = 3015;
pub const IPC_METADATA_CHANGED: LPARAM = 3017;
pub const IPC_SKIN_CHANGED: LPARAM = 3018;
pub const IPC_REGISTER_LOWORD_COMMAND: LPARAM = 3019;
pub const IPC_GET_DISPATCH_OBJECT: LPARAM = 3020;
pub const IPC_GET_UNIQUE_DISPATCH_ID: LPARAM = 3021;
pub const IPC_ADD_DISPATCH_OBJECT: LPARAM = 3022;
pub const IPC_REMOVE_DISPATCH_OBJECT: LPARAM = 3038;
pub const IPC_GET_PROXY_STRING: LPARAM = 3023;
pub const IPC_USE_REGISTRY: LPARAM = 3024;
pub const IPC_GET_API_SERVICE: LPARAM = 3025;
pub const IPC_GET_EXTENDED_FILE_INFOW: LPARAM = 3026;
pub const IPC_GET_EXTENDED_FILE_INFOW_HOOKABLE: LPARAM = 3027;
pub const IPC_SET_EXTENDED_FILE_INFOW: LPARAM = 3028;
pub const IPC_PLAYLIST_GET_NEXT_SELECTED: LPARAM = 3029;
pub const IPC_PLAYLIST_GET_SELECTED_COUNT: LPARAM = 3030;
pub const IPC_GET_PLAYING_FILENAME: LPARAM = 3031;
pub const IPC_OPEN_URL: LPARAM = 3032;
pub const IPC_USE_UXTHEME_FUNC: LPARAM = 3033;
pub const IPC_ISWINTHEMEPRESENT: LPARAM = 0;
pub const IPC_ISAEROCOMPOSITIONACTIVE: LPARAM = 1;
pub const IPC_GET_PLAYING_TITLE: LPARAM = 3034;
pub const IPC_CANPLAY: LPARAM = 3035;
pub const IPC_FETCH_ALBUMART: LPARAM = 3036;
pub const IPC_JSAPI2_GET_DISPATCH_OBJECT: LPARAM = 3037;
pub const IPC_HANDLE_URI: LPARAM = 3039;
pub const IPC_PLAYFILEW_NDE: LPARAM = 3040;
pub const IPC_PLAYFILEW_NDE_TITLE: LPARAM = 3041;
pub const IPC_OUTPUT_STARTED: LPARAM = 3042;
pub const IPC_STOPPLAYING: LPARAM = 3043;
pub const IPC_GET_D3DX9: LPARAM = 3044;
pub const IPC_GET_FILEREGISTRAR_OBJECT: LPARAM = 3045;
pub const IPC_SHELL_ACTION_START: LPARAM = 3047;
pub const IPC_SHELL_ACTION_END: LPARAM = 3048;
pub const IPC_REGISTER_WINAMP_IPCMESSAGE: LPARAM = 65536;
pub const WINAMP_OPTIONS_EQ: LPARAM = 40036;
pub const WINAMP_OPTIONS_PLEDIT: LPARAM = 40040;
pub const WINAMP_VOLUMEUP: LPARAM = 40058;
pub const WINAMP_VOLUMEDOWN: LPARAM = 40059;
pub const WINAMP_FFWD5S: LPARAM = 40060;
pub const WINAMP_REW5S: LPARAM = 40061;
pub const WINAMP_BUTTON1: LPARAM = 40044;
pub const WINAMP_BUTTON2: LPARAM = 40045;
pub const WINAMP_BUTTON3: LPARAM = 40046;
pub const WINAMP_BUTTON4: LPARAM = 40047;
pub const WINAMP_BUTTON5: LPARAM = 40048;
pub const WINAMP_BUTTON1_SHIFT: LPARAM = 40144;
pub const WINAMP_BUTTON2_SHIFT: LPARAM = 40145;
pub const WINAMP_BUTTON3_SHIFT: LPARAM = 40146;
pub const WINAMP_BUTTON4_SHIFT: LPARAM = 40147;
pub const WINAMP_BUTTON5_SHIFT: LPARAM = 40148;
pub const WINAMP_BUTTON1_CTRL: LPARAM = 40154;
pub const WINAMP_BUTTON2_CTRL: LPARAM = 40155;
pub const WINAMP_BUTTON3_CTRL: LPARAM = 40156;
pub const WINAMP_BUTTON4_CTRL: LPARAM = 40157;
pub const WINAMP_BUTTON5_CTRL: LPARAM = 40158;
pub const WINAMP_FILE_PLAY: LPARAM = 40029;
pub const WINAMP_FILE_DIR: LPARAM = 40187;
pub const WINAMP_OPTIONS_PREFS: LPARAM = 40012;
pub const WINAMP_OPTIONS_AOT: LPARAM = 40019;
pub const WINAMP_HELP_ABOUT: LPARAM = 40041;
pub const ID_MAIN_PLAY_AUDIOCD1: LPARAM = 40323;
pub const ID_MAIN_PLAY_AUDIOCD2: LPARAM = 40324;
pub const ID_MAIN_PLAY_AUDIOCD3: LPARAM = 40325;
pub const ID_MAIN_PLAY_AUDIOCD4: LPARAM = 40326;
pub const ID_MAIN_PLAY_AUDIOCD_SEP: LPARAM = 40327;
pub type size_t = ::std::os::raw::c_ulonglong;
pub type wchar_t = ::std::os::raw::c_ushort;
pub type BOOL = ::std::os::raw::c_int;
pub type DWORD = ::std::os::raw::c_ulong;
pub type INT = ::std::os::raw::c_int;
pub type UINT = ::std::os::raw::c_uint;
pub type UINT_PTR = ::std::os::raw::c_ulonglong;
pub type LONG_PTR = ::std::os::raw::c_longlong;
#[repr(C)]
#[repr(align(8))]
#[derive(Debug, Copy, Clone)]
pub struct IDispatch {
    pub _bindgen_opaque_blob: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct enqueueFileWithMetaStruct {
    pub filename: *const ::std::os::raw::c_char,
    pub title: *const ::std::os::raw::c_char,
    pub length: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct enqueueFileWithMetaStructW {
    pub filename: *const wchar_t,
    pub title: *const wchar_t,
    pub length: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extendedFileInfoStruct {
    pub filename: *const ::std::os::raw::c_char,
    pub metadata: *const ::std::os::raw::c_char,
    pub ret: *mut ::std::os::raw::c_char,
    pub retlen: size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basicFileInfoStruct {
    pub filename: *const ::std::os::raw::c_char,
    pub quickCheck: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub title: *mut ::std::os::raw::c_char,
    pub titlelen: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct basicFileInfoStructW {
    pub filename: *const wchar_t,
    pub quickCheck: ::std::os::raw::c_int,
    pub length: ::std::os::raw::c_int,
    pub title: *mut wchar_t,
    pub titlelen: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct infoBoxParam {
    pub parent: HWND,
    pub filename: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct infoBoxParamW {
    pub parent: HWND,
    pub filename: *const wchar_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct waFormatTitle {
    pub spec: *mut ::std::os::raw::c_char,
    pub p: *mut ::std::os::raw::c_void,
    pub out: *mut ::std::os::raw::c_char,
    pub out_len: ::std::os::raw::c_int,
    pub TAGFUNC: ::std::option::Option<
        unsafe extern "C" fn(
            tag: *const ::std::os::raw::c_char,
            p: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_char,
    >,
    pub TAGFREEFUNC: ::std::option::Option<
        unsafe extern "C" fn(tag: *mut ::std::os::raw::c_char, p: *mut ::std::os::raw::c_void),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct waFormatTitleExtended {
    pub filename: *const wchar_t,
    pub useExtendedInfo: ::std::os::raw::c_int,
    pub spec: *const wchar_t,
    pub p: *mut ::std::os::raw::c_void,
    pub out: *mut wchar_t,
    pub out_len: ::std::os::raw::c_int,
    pub TAGFUNC: ::std::option::Option<
        unsafe extern "C" fn(tag: *const wchar_t, p: *mut ::std::os::raw::c_void) -> *mut wchar_t,
    >,
    pub TAGFREEFUNC: ::std::option::Option<
        unsafe extern "C" fn(tag: *mut wchar_t, p: *mut ::std::os::raw::c_void),
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct copyFileInfoStruct {
    pub source: *const ::std::os::raw::c_char,
    pub dest: *const ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct copyFileInfoStructW {
    pub source: *const wchar_t,
    pub dest: *const wchar_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wa_inflate_struct {
    pub inflateReset: ::std::option::Option<
        unsafe extern "C" fn(strm: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub inflateInit_: ::std::option::Option<
        unsafe extern "C" fn(
            strm: *mut ::std::os::raw::c_void,
            version: *const ::std::os::raw::c_char,
            stream_size: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub inflate: ::std::option::Option<
        unsafe extern "C" fn(
            strm: *mut ::std::os::raw::c_void,
            flush: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub inflateEnd: ::std::option::Option<
        unsafe extern "C" fn(strm: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub crc32: ::std::option::Option<
        unsafe extern "C" fn(
            crc: ::std::os::raw::c_ulong,
            buf: *const ::std::os::raw::c_uchar,
            len: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_ulong,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _prefsDlgRec {
    pub hInst: HINSTANCE,
    pub dlgID: ::std::os::raw::c_int,
    pub proc_: *mut ::std::os::raw::c_void,
    pub name: *mut ::std::os::raw::c_char,
    pub where_: isize,
    pub _id: isize,
    pub next: *mut _prefsDlgRec,
}
pub type prefsDlgRec = _prefsDlgRec;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _prefsDlgRecW {
    pub hInst: HINSTANCE,
    pub dlgID: ::std::os::raw::c_int,
    pub proc_: *mut ::std::os::raw::c_void,
    pub name: *mut wchar_t,
    pub where_: isize,
    pub _id: isize,
    pub next: *mut _prefsDlgRec,
}
pub type prefsDlgRecW = _prefsDlgRecW;
pub type FFCALLBACK = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut embedWindowState,
        arg2: INT,
        arg3: LPARAM,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct embedWindowState {
    pub me: HWND,
    pub flags: ::std::os::raw::c_int,
    pub r: RECT,
    pub user_ptr: *mut ::std::os::raw::c_void,
    pub __bindgen_anon_1: embedWindowState__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union embedWindowState__bindgen_ty_1 {
    pub __bindgen_anon_1: embedWindowState__bindgen_ty_1__bindgen_ty_1,
    pub extra_data: [isize; 64usize],
    _bindgen_union_align: [u64; 64usize],
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct embedWindowState__bindgen_ty_1__bindgen_ty_1 {
    pub link: *mut embedWindowState,
    pub attached: isize,
    pub padding1: [isize; 2usize],
    pub guid: GUID,
    pub guidpadding: isize,
    pub callback: FFCALLBACK,
    pub padding2: [isize; 52usize],
    pub hostcount: isize,
    pub reparenting: isize,
    pub wasabi_window: *mut ::std::os::raw::c_void,
}

impl ::std::fmt::Debug for embedWindowState__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(f, "embedWindowState__bindgen_ty_1 {{ union }}")
    }
}
impl ::std::fmt::Debug for embedWindowState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write!(
            f,
            "embedWindowState {{ flags: {:?}, user_ptr: {:?}, __bindgen_anon_1: {:?} }}",
            self.flags, self.user_ptr, self.__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __EMBEDSHOW {
    pub hdr: NMHDR,
    pub fShow: BOOL,
    pub nStatus: UINT,
}
pub type EMBEDSHOW = __EMBEDSHOW;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __SKINWINDOWPARAM {
    pub cbSize: INT,
    pub hwndToSkin: HWND,
    pub windowGuid: GUID,
    pub flagsEx: UINT,
    pub callbackFF: FFCALLBACK,
}
pub type SKINWINDOWPARAM = __SKINWINDOWPARAM;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct embedEnumStruct {
    pub enumProc: ::std::option::Option<
        unsafe extern "C" fn(
            ws: *mut embedWindowState,
            param: *mut embedEnumStruct,
        ) -> ::std::os::raw::c_int,
    >,
    pub user_data: ::std::os::raw::c_int,
}
pub type ifc_audiostream = *mut ::std::os::raw::c_void;
pub type AudioCoder = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct convertFileStruct {
    pub sourcefile: *mut ::std::os::raw::c_char,
    pub destfile: *mut ::std::os::raw::c_char,
    pub destformat: [isize; 8usize],
    pub callbackhwnd: HWND,
    pub error: *mut ::std::os::raw::c_char,
    pub bytes_done: ::std::os::raw::c_int,
    pub bytes_total: ::std::os::raw::c_int,
    pub bytes_out: ::std::os::raw::c_int,
    pub killswitch: ::std::os::raw::c_int,
    pub decoder: *mut ifc_audiostream,
    pub convert_thread: HANDLE,
    pub file_handle: HANDLE,
    pub audio_coder: *mut AudioCoder,
    pub encoder_mod: HMODULE,
    pub bps: ::std::os::raw::c_int,
    pub channels: ::std::os::raw::c_int,
    pub sample_rate: ::std::os::raw::c_int,
    pub extra_data: [isize; 56usize],
}
impl ::std::fmt::Debug for convertFileStruct {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "convertFileStruct {{ sourcefile: {:?}, destfile: {:?}, destformat: {:?}, error: {:?}, bytes_done: {:?}, bytes_total: {:?}, bytes_out: {:?}, killswitch: {:?}, decoder: {:?}, audio_coder: {:?}, bps: {:?}, channels: {:?}, sample_rate: {:?}, extra_data: [{}] }}" , self . sourcefile , self . destfile , self . destformat , self . error , self . bytes_done , self . bytes_total , self . bytes_out , self . killswitch , self . decoder , self . audio_coder , self . bps , self . channels , self . sample_rate , self . extra_data . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct convertFileStructW {
    pub sourcefile: *mut wchar_t,
    pub destfile: *mut wchar_t,
    pub destformat: [isize; 8usize],
    pub callbackhwnd: HWND,
    pub error: *mut wchar_t,
    pub bytes_done: ::std::os::raw::c_int,
    pub bytes_total: ::std::os::raw::c_int,
    pub bytes_out: ::std::os::raw::c_int,
    pub killswitch: ::std::os::raw::c_int,
    pub decoder: *mut ifc_audiostream,
    pub convert_thread: HANDLE,
    pub file_handle: HANDLE,
    pub audio_coder: *mut AudioCoder,
    pub encoder_mod: HMODULE,
    pub bps: ::std::os::raw::c_int,
    pub channels: ::std::os::raw::c_int,
    pub sample_rate: ::std::os::raw::c_int,
    pub extra_data: [isize; 56usize],
}
impl ::std::fmt::Debug for convertFileStructW {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        write ! ( f , "convertFileStructW {{ sourcefile: {:?}, destfile: {:?}, destformat: {:?}, error: {:?}, bytes_done: {:?}, bytes_total: {:?}, bytes_out: {:?}, killswitch: {:?}, decoder: {:?}, audio_coder: {:?}, bps: {:?}, channels: {:?}, sample_rate: {:?}, extra_data: [{}] }}" , self . sourcefile , self . destfile , self . destformat , self . error , self . bytes_done , self . bytes_total , self . bytes_out , self . killswitch , self . decoder , self . audio_coder , self . bps , self . channels , self . sample_rate , self . extra_data . iter ( ) . enumerate ( ) . map ( | ( i , v ) | format ! ( "{}{:?}" , if i > 0 { ", " } else { "" } , v ) ) . collect :: < String > ( ) )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct convertConfigStruct {
    pub hwndParent: HWND,
    pub format: ::std::os::raw::c_int,
    pub hwndConfig: HWND,
    pub extra_data: [::std::os::raw::c_int; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct converterEnumFmtStruct {
    pub enumProc: ::std::option::Option<
        unsafe extern "C" fn(
            user_data: isize,
            desc: *const ::std::os::raw::c_char,
            fourcc: ::std::os::raw::c_int,
        ),
    >,
    pub user_data: isize,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct burnCDStruct {
    pub cdletter: ::std::os::raw::c_char,
    pub playlist_file: *mut ::std::os::raw::c_char,
    pub callback_hwnd: HWND,
    pub error: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct convertSetPriority {
    pub cfs: *mut convertFileStruct,
    pub priority: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct convertSetPriorityW {
    pub cfs: *mut convertFileStructW,
    pub priority: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct convertConfigItem {
    pub format: ::std::os::raw::c_uint,
    pub item: *mut ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_char,
    pub len: ::std::os::raw::c_int,
    pub configfile: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct waHookTitleStruct {
    pub filename: *const ::std::os::raw::c_char,
    pub title: *mut ::std::os::raw::c_char,
    pub length: ::std::os::raw::c_int,
    pub force_useformatting: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct waHookTitleStructW {
    pub filename: *const wchar_t,
    pub title: *mut wchar_t,
    pub length: ::std::os::raw::c_int,
    pub force_useformatting: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct waSetPlColorsStruct {
    pub numElems: ::std::os::raw::c_int,
    pub elems: *mut ::std::os::raw::c_int,
    pub bm: HBITMAP,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct waSpawnMenuParms {
    pub wnd: HWND,
    pub xpos: ::std::os::raw::c_int,
    pub ypos: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct waSpawnMenuParms2 {
    pub wnd: HWND,
    pub xpos: ::std::os::raw::c_int,
    pub ypos: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct VideoOpenStruct {
    pub w: ::std::os::raw::c_int,
    pub h: ::std::os::raw::c_int,
    pub vflip: ::std::os::raw::c_int,
    pub aspectratio: f64,
    pub fmt: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct transAccelStruct {
    pub hwnd: HWND,
    pub uMsg: ::std::os::raw::c_int,
    pub wParam: WPARAM,
    pub lParam: LPARAM,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct windowCommand {
    pub cmd: ::std::os::raw::c_int,
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub align: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DispatchInfo {
    pub name: *mut wchar_t,
    pub dispatch: *mut IDispatch,
    pub id: DWORD,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct extendedFileInfoStructW {
    pub filename: *const wchar_t,
    pub metadata: *const wchar_t,
    pub ret: *mut wchar_t,
    pub retlen: size_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct artFetchData {
    pub size: size_t,
    pub parent: HWND,
    pub artist: *const wchar_t,
    pub album: *const wchar_t,
    pub year: ::std::os::raw::c_int,
    pub amgArtistId: ::std::os::raw::c_int,
    pub amgAlbumId: ::std::os::raw::c_int,
    pub showCancelAll: ::std::os::raw::c_int,
    pub imgData: *mut ::std::os::raw::c_void,
    pub imgDataLen: ::std::os::raw::c_int,
    pub type_: [wchar_t; 10usize],
    pub gracenoteFileId: *const wchar_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stopPlayingInfoStruct {
    pub last_time: ::std::os::raw::c_int,
    pub g_fullstop: ::std::os::raw::c_int,
}
